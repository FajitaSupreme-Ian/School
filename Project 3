package project_3;

import java.util.Random;
import java.util.Arrays;
import java.util.Scanner;



public class Project_3 {

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);

		int input = get_user_input(scan, "Enter number of integers to be sorted");
		int min = get_user_input(scan, "Enter minimum integer");
		int max = get_user_input(scan, "Enter maximum integer");
		int [] numbers = new int [input];
		int[] array = (numbers);
		fill_array(numbers,min,max);
		print_array(numbers);
		System.out.println();
		Project_3.mergeSort(array, 0, array.length - 1);

		System.out.println("Sorted Array:");
		System.out.println(Arrays.toString(array));// sort quits at input of 8170 integers 
	}

	public static int get_user_input(Scanner scan, String prompt) {
		System.out.println(prompt);
		int val = scan.nextInt();

		return val;
	}

	public static void fill_array(int[] rand_numbers,int min,int max) {
		int tot = rand_numbers.length;
		for (int i = 0;i<tot;i++) {
			rand_numbers[i] = gen_random_int(min,max);
		}
	}

	public static void print_array(int[] ary) {
		int tot = ary.length;
		for (int i = 0;i<tot;i++) {
			System.out.println(ary[i]);
		}
	}
	public static void print_merge(int[] sort) {
		int tot = sort.length;
		for (int i = 0;i<tot;i++) {
			System.out.println(sort[i]);
		}
	}

	public static int gen_random_int(int min, int max) {
		Random rand = new Random();
		int r = Math.abs(rand.nextInt());
		r = (r%(max-min +1)) + min;
		return r;
	}
	public static void mergeSort(int array[], int left, int right) {
		if (left < right) {


			int mid = (left + right) / 2;


			mergeSort(array, left, mid);
			mergeSort(array, mid + 1, right);


			merge(array, left, mid, right);
		}
	}

	public static void merge(int array[], int p, int q, int r) {

		int n1 = q - p + 1;
		int n2 = r - q;

		int L[] = new int[n1];
		int M[] = new int[n2];


		for (int i = 0; i < n1; i++)
			L[i] = array[p + i];
		for (int j = 0; j < n2; j++)
			M[j] = array[q + 1 + j];


		int i, j, k;
		i = 0;
		j = 0;
		k = p;


		while (i < n1 && j < n2) {
			if (L[i] <= M[j]) {
				array[k] = L[i];
				i++;
			} else {
				array[k] = M[j];
				j++;
			}
			k++;
		}


		while (i < n1) {
			array[k] = L[i];
			i++;
			k++;
		}

		while (j < n2) {
			array[k] = M[j];
			j++;
			k++;
		}
	}
}
